{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Resource management",
  "type": "I/O resource opened but not safely closed",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'DataOutputStream' should be opened in front of a 'try' block and closed in the corresponding 'finally' block",
  "detailsInfo": "Reports I/O resources that are not safely closed. I/O resources checked by this inspection include `java.io.InputStream`, `java.io.OutputStream`, `java.io.Reader`, `java.io.Writer`, `java.util.zip.ZipFile`, `java.io.Closeable` and `java.io.RandomAccessFile`.\n\n\nI/O resources wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource.\n\n\nBy default, the inspection assumes that the resources can be closed by any method with\n'close' or 'cleanup' in its name.\n\n**Example:**\n\n\n      void save() throws IOException {\n        FileWriter writer = new FileWriter(\"filename.txt\"); //warning\n        writer.write(\"sample\");\n      }\n\n\nUse the following options to configure the inspection:\n\n* List I/O resource classes that do not need to be closed and should be ignored by this inspection.\n* Whether an I/O resource is allowed to be opened inside a `try`block. This style is less desirable because it is more verbose than opening a resource in front of a `try` block.\n* Whether the resource can be closed by any method call with the resource passed as argument.",
  "sources": [
    {
      "type": "file",
      "path": "server/src/main/java/org/example/mankomania/game/Game.java",
      "language": "JAVA",
      "line": 104,
      "offset": 21,
      "length": 16,
      "code": {
        "startLine": 102,
        "length": 16,
        "offset": 78,
        "surroundingCode": "        for (Player player : players) {\n            try {\n                new DataOutputStream(player.socket().getOutputStream()).writeUTF(gameState + \"#\" + String.join(\"#\", data));\n            } catch (IOException e) {\n                throw new RuntimeException(e);"
      }
    }
  ],
  "attributes": {
    "module": "Mankomania.server.main",
    "inspectionName": "IOResource",
    "baselineState": "new"
  },
  "hash": "c07a5c6fda60c0e7aac092db31acd1eb4bbea327e5ba931bf84b11269fd7dc43"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "server/src/main/java/org/example/mankomania/game/Game.java",
      "language": "JAVA",
      "line": 90,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 88,
        "length": 6,
        "offset": 75,
        "surroundingCode": "                break;\n            case MINIGAME_EXCHANGE:\n                break;\n            case MINIGAME_AUCTION:\n                break;"
      }
    }
  ],
  "attributes": {
    "module": "Mankomania.server.main",
    "inspectionName": "DuplicateBranchesInSwitch",
    "baselineState": "new"
  },
  "hash": "a723cd9bf84b8984218e782993e0ca08bb6a8d4050ec0a38ea4d7db463995130"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "server/src/main/java/org/example/mankomania/game/Game.java",
      "language": "JAVA",
      "line": 92,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 90,
        "length": 6,
        "offset": 74,
        "surroundingCode": "                break;\n            case MINIGAME_AUCTION:\n                break;\n            default:\n                throw new IllegalStateException(\"Unexpected value: \" + state);"
      }
    }
  ],
  "attributes": {
    "module": "Mankomania.server.main",
    "inspectionName": "DuplicateBranchesInSwitch",
    "baselineState": "new"
  },
  "hash": "fb6cef8af9748cc3437da2d50263f910d40bb96fb847cbb34cd2380dd852ee3d"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Nullability and data flow problems",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Method invocation 'gameState' may produce 'NullPointerException'",
  "detailsInfo": "Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.\n\nExamples:\n\n    if (array.length < index) {\n      System.out.println(array[index]);\n    } // Array index is always out of bounds\n\n    if (str == null) System.out.println(\"str is null\");\n    System.out.println(str.trim());\n    // the last statement may throw an NPE\n\n    @NotNull\n    Integer square(@Nullable Integer input) {\n        // the method contract is violated\n        return input == null ? null : input * input;\n    }\n\n\nThe inspection behavior may be controlled by a number of annotations, such as\n[nullability](https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html) annotations,\n[@Contract](https://www.jetbrains.com/help/idea/contract-annotations.html) annotation,\n`@Range` annotation and so on.\n\nConfigure the inspection:\n\n* Use the **Suggest @Nullable annotation for methods/fields/parameters where nullable values are used** option to warn when a nullable value is passed as an argument to a method with a non-annotated parameter, stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating the `@Nullable` annotation. You can also configure nullability annotations using the **Configure Annotations** button.\n* Use the **Treat non-annotated members and parameters as @Nullable** option to assume that non-annotated members can be null, so they must not be used in non-null context.\n* Use the **Report not-null required parameter with null-literal argument usages** option to report method parameters that cannot be null (e.g. immediately dereferenced in the method body), but there are call sites where a `null` literal is passed.\n* Use the **Report nullable methods that always return a non-null value** option to report methods that are annotated as `@Nullable`, but always return non-null value. In this case, it's suggested that you change the annotation to `@NotNull`.\n* Use the **Ignore assert statements** option to control how the inspection treats `assert` statements. By default, the option is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored (-da mode).\n* Use the **Report problems that happen only on some code paths** option to control whether to report problems that may happen only on some code path. If this option is disabled, warnings like *exception is possible* will not be reported. The inspection will report only warnings like *exception will definitely occur*. This mode may greatly reduce the number of false-positives, especially if the code is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most important problems in legacy code bases.\n\n\nBefore IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions \\& Exceptions\" inspection.\nNow, it is split into two inspections:\n\"Constant Values\" and \"Nullability and data flow problems\".",
  "sources": [
    {
      "type": "file",
      "path": "server/src/main/java/org/example/mankomania/Server.java",
      "language": "JAVA",
      "line": 55,
      "offset": 43,
      "length": 9,
      "code": {
        "startLine": 53,
        "length": 9,
        "offset": 162,
        "surroundingCode": "                    var input = reader.readUTF();\n                    var response = Game.INSTANCE.move(player, input);\n                    send(writer, response.gameState(), response.data());\n                }\n            } catch (IOException e) {"
      }
    }
  ],
  "attributes": {
    "module": "Mankomania.server.main",
    "inspectionName": "DataFlowIssue",
    "baselineState": "new"
  },
  "hash": "e09d3ba40401e9440c383c52ea94bab7c1e08ecb36047321c953f3af16b8419c"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Call to 'printStackTrace()' should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "server/src/main/java/org/example/mankomania/Server.java",
      "language": "JAVA",
      "line": 58,
      "offset": 19,
      "length": 15,
      "code": {
        "startLine": 56,
        "length": 15,
        "offset": 74,
        "surroundingCode": "                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Mankomania.server.main",
    "inspectionName": "ThrowablePrintStackTrace",
    "baselineState": "new"
  },
  "hash": "6be230b28b52314af72ac798ecf60863eac56aaf2410b84808b58bbaa69a746d"
},{
  "tool": "Code Inspection",
  "category": "Control flow issues",
  "type": "Infinite loop statement",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'while' statement cannot complete without throwing an exception",
  "detailsInfo": "Reports `for`, `while`, or `do` statements that can only exit by throwing an exception. While such statements may be correct, they often happen due to coding errors.\n\nExample:\n\n\n      for (;;) {\n      }\n\n\nUse the **Ignore when placed in Thread.run** option to ignore the\ninfinite loop statements inside `Thread.run`.\nIt may be useful for the daemon threads.\n\nExample:\n\n\n      new Thread(() -> {\n        while (true) {\n        }\n      }).start();\n",
  "sources": [
    {
      "type": "file",
      "path": "server/src/main/java/org/example/mankomania/Server.java",
      "language": "JAVA",
      "line": 17,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 15,
        "length": 5,
        "offset": 115,
        "surroundingCode": "    public static void main(String[] args) {\n        try (var serverSocket = new ServerSocket(8080)) {\n            while (true) {\n                new Connection(serverSocket.accept()).start();\n            }"
      }
    }
  ],
  "attributes": {
    "module": "Mankomania.server.main",
    "inspectionName": "InfiniteLoopStatement",
    "baselineState": "new"
  },
  "hash": "fe7ac09bb8f46000e63b5dd38b63273b9537dda8223ad5ee8fd2a5b439b6b453"
},{
  "tool": "Code Inspection",
  "category": "Control flow issues",
  "type": "Infinite loop statement",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'while' statement cannot complete without throwing an exception",
  "detailsInfo": "Reports `for`, `while`, or `do` statements that can only exit by throwing an exception. While such statements may be correct, they often happen due to coding errors.\n\nExample:\n\n\n      for (;;) {\n      }\n\n\nUse the **Ignore when placed in Thread.run** option to ignore the\ninfinite loop statements inside `Thread.run`.\nIt may be useful for the daemon threads.\n\nExample:\n\n\n      new Thread(() -> {\n        while (true) {\n        }\n      }).start();\n",
  "sources": [
    {
      "type": "file",
      "path": "server/src/main/java/org/example/mankomania/Server.java",
      "language": "JAVA",
      "line": 52,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 50,
        "length": 5,
        "offset": 122,
        "surroundingCode": "                send(writer, GameState.HELLO, player.name());\n                Game.INSTANCE.checkLobby();\n                while (true) {\n                    var input = reader.readUTF();\n                    var response = Game.INSTANCE.move(player, input);"
      }
    }
  ],
  "attributes": {
    "module": "Mankomania.server.main",
    "inspectionName": "InfiniteLoopStatement",
    "baselineState": "new"
  },
  "hash": "e754ccde054689f6cb189dba605b957a1614e2e4ec97421713aa41eaa8546752"
}]}